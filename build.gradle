import org.apache.tools.ant.filters.ReplaceTokens
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version'5.2.0'
}
def versionFile = file('version.properties')
Properties versionProps = new Properties()
versionProps.load(new FileInputStream(versionFile))
def version_main = versionProps['version_main']
def build_number = versionProps['build_number'].toInteger() + 1
def version_type = versionProps['version_type']
group 'me.starchier'
if (System.getenv().BUILD_NUMBER != null) {
    version version_main + '.' + build_number + "-build${System.getenv().BUILD_NUMBER}" +'-' + version_type
} else {
    version version_main + '.' + build_number +'-' + version_type
}
repositories {
    maven {
        name = 'aliyun-public'
        url = 'https://maven.aliyun.com/repository/public'
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    // https://mvnrepository.com/artifact/com.auth0/java-jwt
    implementation 'com.auth0:java-jwt:3.18.1'
    compile group: 'org.java-websocket', name:'Java-WebSocket', version: '1.5.2'
    compile group: 'org.jline', name:'jline', version: '3.19.0'
    compile group: 'com.google.code.gson', name: 'gson', version: '2.8.6'
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'
    compile group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.14.1'
    compile group: 'org.apache.commons', name: 'commons-compress', version: '1.20'
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.30'
    implementation group: 'io.undertow', name: 'undertow-core', version: '2.2.7.Final'
    //compile group: 'org.yaml', name: 'snakeyaml', version: '1.26'
    compile group: 'com.github.Carleslc.Simple-YAML', name: 'Simple-Yaml', version: '1.7.2'
    testCompileOnly 'org.projectlombok:lombok:1.18.18'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.18'
}
shadowJar {
    dependencies {
        exclude('org.junit.jupiter:junit-jupiter-api:5.7.0')
    }
    manifest {
        // 这里指定main class
        attributes 'Main-Class': 'me.starchier.ServerMain'
    }
}
task incrementBuildNumber {
    doFirst {
        versionProps.load(new FileInputStream(versionFile))
        def buildNum = versionProps['build_number'].toInteger()
        buildNum++
        versionProps['build_number'] = buildNum.toString()
        versionProps.store(versionFile.newWriter(), null)
        def versionFileDir = projectDir.getAbsolutePath() + '/src/main/java/me/starchier/ServerMain.java'
        def oldVersionStr = findOldVersionStr(versionFileDir)
        def rootProjectName = findProjectNameStr(versionFileDir)
        def newVersionStr
        if (System.getenv().BUILD_NUMBER != null) {
            newVersionStr = "    public static final String VERSION = \"" + version_main + '.' + buildNum + "-build${System.getenv().BUILD_NUMBER}" +'-' + version_type + "\";"
        } else {
            newVersionStr = "    public static final String VERSION = \"" + version_main + '.' + buildNum +'-DEV-' + version_type + "\";"
        }
        def projectName = "    public static final String NAME = \"" + rootProject.name + "\";"
        def updatedContent = new File(versionFileDir).getText('UTF-8').replaceAll(oldVersionStr, newVersionStr).replaceAll(rootProjectName, projectName)
        new File(versionFileDir).write(updatedContent, 'UTF-8')
    }
}
test {
    useJUnitPlatform()
}
processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}
static def findOldVersionStr(path) {
    def readerString = "";
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.contains("public static final String VERSION")) {
                readerString <<= it
                return readerString
            }
        }
        return readerString
    }
}
static def findProjectNameStr(path) {
    def readerString = "";
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.contains("public static final String NAME")) {
                readerString <<= it
                return readerString
            }
        }
        return readerString
    }
}