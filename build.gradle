import org.apache.tools.ant.filters.ReplaceTokens
plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version'5.2.0'
}
def versionFile = file('version.properties')
Properties versionProps = new Properties()
versionProps.load(new FileInputStream(versionFile))
def version_main = versionProps['version_main']
def build_number = versionProps['build_number'].toInteger() + 1
def version_type = versionProps['version_type']
group 'me.starchier'
version version_main + '.b' + build_number +'-' + version_type
repositories {
    maven {
        name = 'aliyun-public'
        url = 'https://maven.aliyun.com/repository/public'
    }
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
    compile 'org.java-websocket:Java-WebSocket:1.3.8'
    compile 'org.jline:jline:3.19.0'
    compile 'com.google.code.gson:gson:2.8.6'
}
shadowJar {
    dependencies {
        exclude('org.junit.jupiter:junit-jupiter-api:5.7.0')
    }
    manifest {
        // 这里指定main class
        attributes 'Main-Class': 'me.starchier.ServerMain'
    }
}
task incrementBuildNumber {
    doFirst {
        versionProps.load(new FileInputStream(versionFile))
        def buildNum = versionProps['build_number'].toInteger()
        buildNum++
        versionProps['build_number'] = buildNum.toString()
        versionProps.store(versionFile.newWriter(), null)
        def versionFileDir = projectDir.getAbsolutePath() + '\\src\\main\\java\\me\\starchier\\ServerMain.java'
        def oldVersionStr = findOldVersionStr(versionFileDir)
        def newVersionStr = "    public static final String VERSION = \"" + version_main + '.b' + buildNum +'-' + version_type + "\";"
        def updatedContent = new File(versionFileDir).getText('UTF-8').replaceAll(oldVersionStr, newVersionStr)
        new File(versionFileDir).write(updatedContent, 'UTF-8')
    }
}
test {
    useJUnitPlatform()
}
processResources {
    from(sourceSets.main.resources.srcDirs) {
        filter ReplaceTokens, tokens: [version: version]
    }
}
static def findOldVersionStr(path) {
    def readerString = "";
    new File(path).withReader('UTF-8') { reader ->
        reader.eachLine {
            if (it.contains("public static final String VERSION")) {
                readerString <<= it
                return readerString
            }
        }
        return readerString
    }
}